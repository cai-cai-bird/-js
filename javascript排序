/* 冒泡排序
1.比较相邻的两个元素,如果第一个比第二个大,就交换顺序
2.对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。
3.针对所有的元素重复以上的步骤，除了最后一个。
4.持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较
*/
function bubbleSort(arr){
  for(var i=0;i<arr.length-1;i++){
    for(var j=0;j<arr.length-1-i;j++){
      if(arr[j]>arr[j+1]){
        var temp = arr[j+1];
        arr[j+1] = arr[j];
        arr[j] = temp;
      }
    }
  }
  return arr
}
/* 选择排序
1.取到待排序的集合,默认第一个数值已经排序
2.然后从剩余未排序序列继续寻找最小元素,然后放到已排序序列的结尾
*/
function selectSort(arr){
	for(var i=0;i<arr.length-1;i++){
		var minIndex = i;
		for(var j=i+1;j<arr.length;j++){
			if(arr[minIndex]>arr[j]){
				minIndex = j;
			}
		}
		var temp = arr[i];
		arr[i] = arr[minIndex];
		arr[minIndex] = temp
	}
	return arr;
}
/* 插入排序
1.将待排序的序列的地一个元素看作是一个有序序列,,然后从第二个元素到最后一个元素为待排序序列
2.从头到尾依次扫描,将扫描到的每个元素插入有序序列适当的位置
*/
function insertSort(arr){
  for(var i = 1;i<arr.length;i++){
  	var curIndex = i-1;
	  var curValue = arr[i]
	  while(curIndex >=0 && arr[curIndex]>curValue){
		arr[curIndex+1] = arr[curIndex]
		curIndex--;
	} 
	arr[curIndex+1] = curValue
  }
  return arr
}
